<#@ template language="C#" debug="true"  #>
<#@ output extension=".cs" #>
<#@ import namespace="OfficeSoft.Data" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ parameter name="namespacename" type="System.String" #>
<#@ parameter name="classname" type="System.String" #>
<#@ parameter name="database" type="OfficeSoft.Data.DatabaseModel" #>
using System.ComponentModel;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Runtime.Serialization;
using OfficeSoft.Common.Contracts;
using OfficeSoft.Constructor.Data.Maps;

namespace <#= this.namespacename #>
{
    public class <#= this.classname #> : DbContext
    {
        public <#= this.classname #>()
            : base("name=ContructorDb")
        { 
            Database.SetInitializer<<#= this.classname #>>(null);
        }

		<# foreach (TableModel item in database.TabelModelList){#>
		public DbSet<<#= item.Name #>>  <#= item.Name #>Set {get; set;}
		<#} #>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Ignore<PropertyChangedEventHandler>();
            modelBuilder.Ignore<ExtensionDataObject>();
			modelBuilder.Ignore<IIdentifiableEntity>();
			<# foreach (TableModel item in database.TabelModelList){#>
           modelBuilder.Configurations.Add(new <#= item.Name #>Map());
			<#} #>

            base.OnModelCreating(modelBuilder);
        }
    
    }
}
