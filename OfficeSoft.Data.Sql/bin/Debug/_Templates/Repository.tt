<#@ template language="C#" debug="true"  #>
<#@ output extension=".cs" #>
<#@ import namespace="OfficeSoft.Data" #>
<#@ parameter name="namespacename" type="System.String" #>
<#@ parameter name="classname" type="System.String" #>
<#@ parameter name="table" type="OfficeSoft.Data.TableModel" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using OfficeSoft.Constructor.Data.Contracts;
using OfficeSoft.Constructor.Entities;

namespace <#= namespacename #>
{
    [Export(typeof(I<#= classname  #>Repository))]
    [PartCreationPolicy(CreationPolicy.NonShared)]
    public class <#= classname  #>Repository : DataRepositoryBase<<#= table.Name #>>, I<#= classname  #>Repository
    {
        protected override <#= table.Name #> AddEntity(ConstructorDataContext entityContext, <#= table.Name #> entity)
        {
            return entityContext.<#= table.Name #>Set.Add(entity);
        }

        protected override <#= table.Name #> UpdateEntity(ConstructorDataContext entityContext, <#= table.Name #> entity)
        {
            return (from e in entityContext.<#= table.Name #>Set
                    where e.EntityId == entity.EntityId
                    select e).FirstOrDefault();
        }

        protected override IEnumerable<<#= table.Name #>> GetEntities(ConstructorDataContext entityContext)
        {
            return from e in entityContext.<#= table.Name #>Set
				   <# foreach(var key in table.ForeignKeyList) { #>
				   .Include("<#= key.ReferencedTable #>")
				   <# } #>
                   select e;
        }

        protected override <#= table.Name #> GetEntity(ConstructorDataContext entityContext, Guid id)
        {
            var query = (from e in entityContext.<#= table.Name #>Set
                         where e.EntityId == id
                         select e);
            var results = query.FirstOrDefault();
            return results;
        }
    }
}
